/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { DOCUMENT, NgClass } from '@angular/common';
import { Component, EventEmitter, Inject, Input, Output, ViewChild, booleanAttribute } from '@angular/core';
import { calculateColor, calculateOffset } from '../util/util';
import { GradientComponent } from './gradient.component';
import { HandlerComponent } from './handler.component';
import { PaletteComponent } from './palette.component';
import * as i0 from "@angular/core";
function getPosition(e) {
    const obj = 'touches' in e ? e.touches[0] : e;
    const scrollXOffset = document.documentElement.scrollLeft || document.body.scrollLeft || window.pageXOffset;
    const scrollYOffset = document.documentElement.scrollTop || document.body.scrollTop || window.pageYOffset;
    return { pageX: obj.pageX - scrollXOffset, pageY: obj.pageY - scrollYOffset };
}
export class SliderComponent {
    constructor(cdr, document) {
        this.cdr = cdr;
        this.document = document;
        this.gradientColors = [];
        this.direction = 'to right';
        this.type = 'hue';
        this.color = null;
        this.value = null;
        this.disabled = false;
        this.nzOnChange = new EventEmitter();
        this.nzOnChangeComplete = new EventEmitter();
        this.offsetValue = { x: 0, y: 0 };
        this.dragRef = false;
        this.mouseMoveRef = () => null;
        this.mouseUpRef = () => null;
        this.updateOffset = (e, direction = 'x') => {
            const { pageX, pageY } = getPosition(e);
            const { x: rectX, y: rectY, width, height } = this.containerRef?.nativeElement?.getBoundingClientRect() || { x: 0, y: 0, width: 0, height: 0 };
            const { width: targetWidth, height: targetHeight } = this.transformRef?.nativeElement?.getBoundingClientRect() || {
                width: 0,
                height: 0
            };
            const centerOffsetX = targetWidth / 2;
            const centerOffsetY = targetHeight / 2;
            const offsetX = Math.max(0, Math.min(pageX - rectX, width)) - centerOffsetX;
            const offsetY = Math.max(0, Math.min(pageY - rectY, height)) - centerOffsetY;
            const calcOffset = {
                x: offsetX,
                y: direction === 'x' ? this.offsetValue.y : offsetY
            };
            // Exclusion of boundary cases
            if ((targetWidth === 0 && targetHeight === 0) || targetWidth !== targetHeight) {
                return;
            }
            this.offsetValue = calcOffset;
            this.nzOnChange.emit(calculateColor(calcOffset, this.containerRef.nativeElement, this.transformRef.nativeElement, this.color, this.type));
            this.cdr.detectChanges();
        };
        this.onDragMove = (e) => {
            e.preventDefault();
            this.updateOffset(e);
        };
        this.onDragStop = (e) => {
            e.preventDefault();
            this.dragRef = false;
            this.document.removeEventListener('mousemove', this.onDragMove);
            this.document.removeEventListener('mouseup', this.mouseUpRef);
            this.document.removeEventListener('touchmove', this.mouseMoveRef);
            this.document.removeEventListener('touchend', this.mouseUpRef);
            this.mouseMoveRef = () => null;
            this.mouseUpRef = () => null;
            this.nzOnChangeComplete?.emit(this.type);
        };
        this.onDragStart = (e) => {
            if (this.disabled) {
                return;
            }
            this.updateOffset(e);
            this.dragRef = true;
            this.document.addEventListener('mousemove', this.onDragMove);
            this.document.addEventListener('mouseup', this.onDragStop);
            this.document.addEventListener('touchmove', this.onDragMove);
            this.document.addEventListener('touchend', this.onDragStop);
            this.mouseMoveRef = this.onDragMove;
            this.mouseUpRef = this.onDragStop;
            this.cdr.markForCheck();
        };
    }
    ngOnInit() {
        this.document.removeEventListener('mousemove', this.mouseMoveRef);
        this.document.removeEventListener('mouseup', this.mouseUpRef);
        this.document.removeEventListener('touchmove', this.mouseMoveRef);
        this.document.removeEventListener('touchend', this.mouseUpRef);
        this.mouseMoveRef = () => null;
        this.mouseUpRef = () => null;
    }
    ngOnChanges(changes) {
        const { color } = changes;
        if (color) {
            if (!this.dragRef && this.containerRef && this.transformRef) {
                const calcOffset = calculateOffset(this.containerRef.nativeElement, this.transformRef.nativeElement, this.color, this.type);
                if (calcOffset) {
                    this.offsetValue = calcOffset;
                    this.cdr.detectChanges();
                }
            }
        }
    }
    ngAfterViewInit() {
        if (!this.dragRef && this.containerRef && this.transformRef) {
            const calcOffset = calculateOffset(this.containerRef.nativeElement, this.transformRef.nativeElement, this.color, this.type);
            if (calcOffset) {
                this.offsetValue = calcOffset;
                this.cdr.detectChanges();
            }
        }
    }
    dragStartHandle(e) {
        this.onDragStart(e);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: SliderComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.0.1", type: SliderComponent, isStandalone: true, selector: "color-slider", inputs: { gradientColors: "gradientColors", direction: "direction", type: "type", color: "color", value: "value", disabled: ["disabled", "disabled", booleanAttribute] }, outputs: { nzOnChange: "nzOnChange", nzOnChangeComplete: "nzOnChangeComplete" }, viewQueries: [{ propertyName: "containerRef", first: true, predicate: ["slider"], descendants: true }, { propertyName: "transformRef", first: true, predicate: ["transform"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div
      #slider
      (mousedown)="dragStartHandle($event)"
      (touchstart)="dragStartHandle($event)"
      class="ant-color-picker-slider"
      [ngClass]="'ant-color-picker-slider-' + type"
    >
      <color-palette>
        <div
          #transform
          style="position: absolute; z-index: 1;"
          [style.left]="offsetValue.x + 'px'"
          [style.top]="offsetValue.y + 'px'"
        >
          <color-handler size="small" [color]="value"></color-handler>
        </div>
        <color-gradient [colors]="gradientColors" [direction]="direction" [type]="type"></color-gradient>
      </color-palette>
    </div>
  `, isInline: true, styles: [":host{display:block;width:100%}\n"], dependencies: [{ kind: "component", type: PaletteComponent, selector: "color-palette" }, { kind: "component", type: GradientComponent, selector: "color-gradient", inputs: ["colors", "direction", "type"] }, { kind: "component", type: HandlerComponent, selector: "color-handler", inputs: ["color", "size"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: SliderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'color-slider', standalone: true, imports: [PaletteComponent, GradientComponent, HandlerComponent, NgClass], template: `
    <div
      #slider
      (mousedown)="dragStartHandle($event)"
      (touchstart)="dragStartHandle($event)"
      class="ant-color-picker-slider"
      [ngClass]="'ant-color-picker-slider-' + type"
    >
      <color-palette>
        <div
          #transform
          style="position: absolute; z-index: 1;"
          [style.left]="offsetValue.x + 'px'"
          [style.top]="offsetValue.y + 'px'"
        >
          <color-handler size="small" [color]="value"></color-handler>
        </div>
        <color-gradient [colors]="gradientColors" [direction]="direction" [type]="type"></color-gradient>
      </color-palette>
    </div>
  `, styles: [":host{display:block;width:100%}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }], propDecorators: { containerRef: [{
                type: ViewChild,
                args: ['slider', { static: false }]
            }], transformRef: [{
                type: ViewChild,
                args: ['transform', { static: false }]
            }], gradientColors: [{
                type: Input
            }], direction: [{
                type: Input
            }], type: [{
                type: Input
            }], color: [{
                type: Input
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], nzOnChange: [{
                type: Output
            }], nzOnChangeComplete: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,